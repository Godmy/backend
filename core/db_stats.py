"""
Database Statistics Utilities
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from typing import Dict, List, Optional

from sqlalchemy import inspect, text
from sqlalchemy.orm import Session

from core.database import Base, engine

logger = logging.getLogger(__name__)


def get_table_count(db: Session, table_name: str) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ

    Args:
        db: Database session
        table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    """
    try:
        result = db.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
        count = result.scalar()
        return count if count is not None else 0
    except Exception as e:
        logger.warning(f"Failed to get count for table {table_name}: {e}")
        return 0


def get_all_table_counts(db: Session) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö

    Args:
        db: Database session

    Returns:
        –°–ª–æ–≤–∞—Ä—å {table_name: count}
    """
    inspector = inspect(engine)
    table_names = inspector.get_table_names()

    counts = {}
    for table_name in table_names:
        counts[table_name] = get_table_count(db, table_name)

    return counts


def log_table_statistics(
    db: Session,
    tables: Optional[List[str]] = None,
    title: str = "Database Statistics"
) -> Dict[str, int]:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º

    Args:
        db: Database session
        tables: –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ None - –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã)
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤

    Returns:
        –°–ª–æ–≤–∞—Ä—å {table_name: count}
    """
    logger.info("=" * 70)
    logger.info(f"{title:^70}")
    logger.info("=" * 70)

    if tables:
        counts = {table: get_table_count(db, table) for table in tables}
    else:
        counts = get_all_table_counts(db)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∏–º–µ–Ω–∏
    sorted_tables = sorted(counts.items())

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    max_len = max(len(name) for name, _ in sorted_tables) if sorted_tables else 0

    total_records = 0
    for table_name, count in sorted_tables:
        logger.info(f"  {table_name:<{max_len}} : {count:>8,} records")
        total_records += count

    logger.info("-" * 70)
    logger.info(f"  {'TOTAL':<{max_len}} : {total_records:>8,} records")
    logger.info("=" * 70)

    return counts


def log_table_change(
    table_name: str,
    before_count: int,
    after_count: int,
    created: int = 0,
    updated: int = 0,
    skipped: int = 0
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ

    Args:
        table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        before_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        after_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        created: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        updated: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        skipped: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    delta = after_count - before_count

    logger.info(f"  üìä Table: {table_name}")
    logger.info(f"     Before:  {before_count:>6,} records")
    logger.info(f"     After:   {after_count:>6,} records")

    if created > 0:
        logger.info(f"     ‚úÖ Created: {created:>6,} records")
    if updated > 0:
        logger.info(f"     üîÑ Updated: {updated:>6,} records")
    if skipped > 0:
        logger.info(f"     ‚äò Skipped: {skipped:>6,} records")

    if delta > 0:
        logger.info(f"     üìà Delta:   +{delta:>6,} records")
    elif delta < 0:
        logger.info(f"     üìâ Delta:   {delta:>6,} records")
    else:
        logger.info(f"     ‚û°Ô∏è  Delta:   {delta:>6,} records (no change)")


class TableStatsTracker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö

    Usage:
        tracker = TableStatsTracker(db, ["users", "roles"])
        tracker.log_before("Starting user creation")

        # ... create users ...

        tracker.log_after("Users created", created=10, skipped=5)
    """

    def __init__(self, db: Session, tables: List[str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞

        Args:
            db: Database session
            tables: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        """
        self.db = db
        self.tables = tables
        self.before_counts: Dict[str, int] = {}
        self.after_counts: Dict[str, int] = {}

    def log_before(self, title: str = "Before Operation") -> Dict[str, int]:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {table_name: count}
        """
        self.before_counts = log_table_statistics(self.db, self.tables, title)
        return self.before_counts

    def log_after(
        self,
        title: str = "After Operation",
        created: int = 0,
        updated: int = 0,
        skipped: int = 0
    ) -> Dict[str, int]:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
            created: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            updated: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            skipped: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°–ª–æ–≤–∞—Ä—å {table_name: count}
        """
        self.after_counts = log_table_statistics(self.db, self.tables, title)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        logger.info("")
        logger.info("=" * 70)
        logger.info("CHANGES PER TABLE".center(70))
        logger.info("=" * 70)

        for table_name in self.tables:
            before = self.before_counts.get(table_name, 0)
            after = self.after_counts.get(table_name, 0)

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º created/updated/skipped –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            # (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            if len(self.tables) == 1:
                log_table_change(table_name, before, after, created, updated, skipped)
            else:
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ delta
                log_table_change(table_name, before, after)

        logger.info("=" * 70)

        return self.after_counts

    def get_delta(self, table_name: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ

        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã

        Returns:
            –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π (after - before)
        """
        before = self.before_counts.get(table_name, 0)
        after = self.after_counts.get(table_name, 0)
        return after - before

    def get_total_delta(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º
        """
        return sum(self.get_delta(table) for table in self.tables)
