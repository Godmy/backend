"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
- Single Responsibility: –∫–∞–∂–¥—ã–π —Å–∏–¥–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –º–æ–¥–µ–ª—å
- Open/Closed: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–∏–¥–µ—Ä—ã
- Liskov Substitution: –≤—Å–µ —Å–∏–¥–µ—Ä—ã –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã
- Interface Segregation: —á–µ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
"""

import logging
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Dict, List, Optional

from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)


class SeederMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–¥–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""

    def __init__(
        self,
        name: str,
        version: str,
        description: str,
        dependencies: Optional[List[str]] = None,
    ):
        self.name = name
        self.version = version
        self.description = description
        self.dependencies = dependencies or []
        self.last_run: Optional[datetime] = None
        self.status: str = "pending"  # pending, running, completed, failed
        self.records_created: int = 0
        self.records_updated: int = 0
        self.records_skipped: int = 0


class BaseSeeder(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤

    –ö–∞–∂–¥—ã–π —Å–∏–¥–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
    - metadata: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–¥–µ—Ä–∞
    - should_run(): –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
    - seed(): –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    """

    def __init__(self, db: Session):
        self.db = db
        self.logger = logging.getLogger(self.__class__.__name__)

    @property
    @abstractmethod
    def metadata(self) -> SeederMetadata:
        """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–¥–µ—Ä–∞"""
        pass

    @abstractmethod
    def should_run(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏–¥–µ—Ä

        Returns:
            True –µ—Å–ª–∏ —Å–∏–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
        """
        pass

    @abstractmethod
    def seed(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
        """
        pass

    def run(self) -> SeederMetadata:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–¥–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        Returns:
            –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–¥–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        meta = self.metadata
        meta.status = "running"
        meta.last_run = datetime.utcnow()

        self.logger.info("=" * 60)
        self.logger.info(f"Starting seeder: {meta.name}")
        self.logger.info(f"Description: {meta.description}")
        self.logger.info(f"Version: {meta.version}")
        self.logger.info("=" * 60)

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å
            if not self.should_run():
                self.logger.info(f"Skipping {meta.name} - data already exists")
                meta.status = "skipped"
                return meta

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–µ—Ä
            self.seed()

            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            meta.status = "completed"
            self.logger.info(f"‚úì {meta.name} completed successfully!")
            self.logger.info(f"  Created: {meta.records_created}")
            self.logger.info(f"  Updated: {meta.records_updated}")
            self.logger.info(f"  Skipped: {meta.records_skipped}")

        except Exception as e:
            meta.status = "failed"
            self.logger.error(f"‚úó {meta.name} failed: {e}")
            self.db.rollback()
            raise

        return meta

    def batch_insert(
        self, model_class: Any, records: List[Dict[str, Any]], batch_size: int = 1000
    ) -> int:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è batch-–≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π

        Args:
            model_class: –ö–ª–∞—Å—Å SQLAlchemy –º–æ–¥–µ–ª–∏
            records: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        total = len(records)
        created = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –î–û –æ–ø–µ—Ä–∞—Ü–∏–∏
        table_name = model_class.__tablename__
        count_before = self.db.query(model_class).count()

        self.logger.info(f"  üìã Table: {table_name}")
        self.logger.info(f"     Records before: {count_before:,}")
        self.logger.info(f"     Records to insert: {total:,}")

        for i in range(0, total, batch_size):
            batch = records[i : i + batch_size]
            self.db.bulk_insert_mappings(model_class, batch)
            self.db.flush()
            created += len(batch)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if total > batch_size:
                progress = (created / total) * 100
                self.logger.info(
                    f"     ‚è≥ Progress: {created:,}/{total:,} ({progress:.1f}%)"
                )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ü–û–°–õ–ï –æ–ø–µ—Ä–∞—Ü–∏–∏
        count_after = self.db.query(model_class).count()
        actual_created = count_after - count_before

        self.logger.info(f"     ‚úÖ Created: {actual_created:,} records")
        self.logger.info(f"     Records after: {count_after:,}")
        self.logger.info(f"     Delta: +{actual_created:,}")

        return created

    def batch_update(
        self, model_class: Any, records: List[Dict[str, Any]], batch_size: int = 1000
    ) -> int:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è batch-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π

        Args:
            model_class: –ö–ª–∞—Å—Å SQLAlchemy –º–æ–¥–µ–ª–∏
            records: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å id)
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        total = len(records)
        updated = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –î–û –æ–ø–µ—Ä–∞—Ü–∏–∏
        table_name = model_class.__tablename__
        count_before = self.db.query(model_class).count()

        self.logger.info(f"  üìã Table: {table_name}")
        self.logger.info(f"     Records in table: {count_before:,}")
        self.logger.info(f"     Records to update: {total:,}")

        for i in range(0, total, batch_size):
            batch = records[i : i + batch_size]
            self.db.bulk_update_mappings(model_class, batch)
            self.db.flush()
            updated += len(batch)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if total > batch_size:
                progress = (updated / total) * 100
                self.logger.info(
                    f"     ‚è≥ Progress: {updated:,}/{total:,} ({progress:.1f}%)"
                )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ü–û–°–õ–ï –æ–ø–µ—Ä–∞—Ü–∏–∏
        count_after = self.db.query(model_class).count()
        delta = count_after - count_before

        self.logger.info(f"     üîÑ Updated: {updated:,} records")
        self.logger.info(f"     Records after: {count_after:,}")
        if delta != 0:
            self.logger.info(f"     Delta: {delta:+,} (table size changed)")

        return updated


class SeederRegistry:
    """
    –†–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –ø–æ—Ä—è–¥–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """

    def __init__(self):
        self._seeders: Dict[str, type] = {}

    def register(self, name: str):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–¥–µ—Ä–∞

        Usage:
            @SeederRegistry.register("languages")
            class LanguagesSeeder(BaseSeeder):
                ...
        """

        def decorator(seeder_class):
            self._seeders[name] = seeder_class
            return seeder_class

        return decorator

    def get_seeder(self, name: str, db: Session) -> BaseSeeder:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        if name not in self._seeders:
            raise ValueError(f"Seeder '{name}' not registered")
        return self._seeders[name](db)

    def get_all_seeders(self, db: Session) -> List[BaseSeeder]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–¥–µ—Ä—ã"""
        return [seeder_class(db) for seeder_class in self._seeders.values()]

    def resolve_dependencies(self, seeders: List[BaseSeeder]) -> List[BaseSeeder]:
        """
        –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–¥–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

        Args:
            seeders: –°–ø–∏—Å–æ–∫ —Å–∏–¥–µ—Ä–æ–≤

        Returns:
            –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å name -> seeder
        seeder_map = {s.metadata.name: s for s in seeders}

        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sorted_seeders = []
        visited = set()
        temp_visited = set()

        def visit(name: str):
            if name in temp_visited:
                raise ValueError(f"Circular dependency detected: {name}")
            if name in visited:
                return

            temp_visited.add(name)

            seeder = seeder_map.get(name)
            if seeder:
                for dep in seeder.metadata.dependencies:
                    visit(dep)

                visited.add(name)
                sorted_seeders.append(seeder)

            temp_visited.remove(name)

        for seeder in seeders:
            visit(seeder.metadata.name)

        return sorted_seeders


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
registry = SeederRegistry()
