#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–µ—Ä–≤–∏—Å–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_email.py
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.email_service import email_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_verification_email():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    logger.info("Testing verification email...")

    result = email_service.send_verification_email(
        to_email="testuser@example.com",
        username="testuser",
        token="test-verification-token-abc123"
    )

    if result:
        logger.info("‚úÖ Verification email sent successfully")
    else:
        logger.error("‚ùå Failed to send verification email")

    return result


def test_password_reset_email():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    logger.info("Testing password reset email...")

    result = email_service.send_password_reset_email(
        to_email="testuser@example.com",
        username="testuser",
        token="test-reset-token-xyz789"
    )

    if result:
        logger.info("‚úÖ Password reset email sent successfully")
    else:
        logger.error("‚ùå Failed to send password reset email")

    return result


def test_welcome_email():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    logger.info("Testing welcome email...")

    result = email_service.send_welcome_email(
        to_email="newuser@example.com",
        username="newuser"
    )

    if result:
        logger.info("‚úÖ Welcome email sent successfully")
    else:
        logger.error("‚ùå Failed to send welcome email")

    return result


def test_custom_email():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    logger.info("Testing custom email...")

    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .button {
                display: inline-block;
                padding: 12px 24px;
                background: #4CAF50;
                color: white;
                text-decoration: none;
                border-radius: 4px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–∏—Å—å–º–æ</h1>
            <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.</p>
            <a href="https://example.com" class="button">–ù–∞–∂–º–∏ –º–µ–Ω—è</a>
        </div>
    </body>
    </html>
    """

    text_content = """
    –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–∏—Å—å–º–æ

    –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.

    –°—Å—ã–ª–∫–∞: https://example.com
    """

    result = email_service.send_email(
        to_email="custom@example.com",
        subject="–¢–µ—Å—Ç–æ–≤–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–∏—Å—å–º–æ",
        html_content=html_content,
        text_content=text_content
    )

    if result:
        logger.info("‚úÖ Custom email sent successfully")
    else:
        logger.error("‚ùå Failed to send custom email")

    return result


def test_multiple_recipients():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
    logger.info("Testing multiple recipients email...")

    result = email_service.send_email(
        to_email=["user1@example.com", "user2@example.com", "user3@example.com"],
        subject="–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏",
        html_content="<h1>–ü—Ä–∏–≤–µ—Ç!</h1><p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.</p>",
        text_content="–ü—Ä–∏–≤–µ—Ç!\n\n–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º."
    )

    if result:
        logger.info("‚úÖ Multiple recipients email sent successfully")
    else:
        logger.error("‚ùå Failed to send email to multiple recipients")

    return result


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("=" * 60)
    logger.info("Starting Email Service Tests")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info(f"\nConfiguration:")
    logger.info(f"  SMTP Host: {email_service.smtp_host}")
    logger.info(f"  SMTP Port: {email_service.smtp_port}")
    logger.info(f"  From Email: {email_service.from_email}")
    logger.info(f"  Use TLS: {email_service.use_tls}")
    logger.info(f"  Frontend URL: {email_service.frontend_url}")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Verification Email", test_verification_email),
        ("Password Reset Email", test_password_reset_email),
        ("Welcome Email", test_welcome_email),
        ("Custom Email", test_custom_email),
        ("Multiple Recipients", test_multiple_recipients),
    ]

    results = []
    logger.info("\n" + "=" * 60)
    logger.info("Running Tests")
    logger.info("=" * 60 + "\n")

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå {test_name} failed with exception: {e}")
            results.append((test_name, False))

        logger.info("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

    # –ò—Ç–æ–≥–∏
    logger.info("=" * 60)
    logger.info("Test Results Summary")
    logger.info("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{status}: {test_name}")

    logger.info("")
    logger.info(f"Total: {passed}/{total} tests passed")

    if passed == total:
        logger.info("üéâ All tests passed!")
        logger.info("\nüìß Check MailPit web UI at: http://localhost:8025")
    else:
        logger.warning(f"‚ö†Ô∏è  {total - passed} test(s) failed")

    logger.info("=" * 60)

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
