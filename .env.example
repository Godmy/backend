# ==============================================================================
# Environment Configuration Example
# ==============================================================================
#
# Copy this file to .env and update with your values
#
# For Development:
#   cp .env.example .env
#   Update values below for local development
#
# For Production:
#   Use .env.production.template with GitHub Secrets
#   See PRODUCTION_DEPLOYMENT.md for detailed instructions
#
# ==============================================================================

# JWT Configuration
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production-MUST-BE-CHANGED
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Database Configuration
# For local development
DB_HOST=localhost
DB_PORT=5432
DB_NAME=templates
DB_USER=template_user
DB_PASSWORD=template_password

# Database URL (constructed from above values)
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# Application Configuration
APP_HOST=0.0.0.0
APP_PORT=8000
DEBUG=False

# Database Initialization
# Set to 'true' to automatically seed database with test data on startup
# Set to 'false' in production to prevent data seeding
SEED_DATABASE=true

# Redis Configuration
# For local development
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# For production, set password
# REDIS_PASSWORD=your_redis_password

# CORS Configuration
# Comma-separated list of allowed origins
ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173

# Email Configuration
# For local development with MailPit (docker-compose.dev.yml)
SMTP_HOST=mailpit
SMTP_PORT=1025
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_USE_TLS=False
FROM_EMAIL=noreply@multipult.dev

# For production, use real SMTP server (e.g., SendGrid, AWS SES)
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USERNAME=apikey
# SMTP_PASSWORD=your_sendgrid_api_key
# SMTP_USE_TLS=True

# Frontend URL for email links (verification, password reset)
FRONTEND_URL=http://localhost:5173

# OAuth Configuration
# Google OAuth
# Get credentials from: https://console.cloud.google.com/apis/credentials
# 1. Create OAuth 2.0 Client ID
# 2. Add authorized redirect URIs (e.g., http://localhost:5173/auth/google/callback)
# 3. Copy Client ID and Client Secret
GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Telegram OAuth
# Get bot token from: https://t.me/BotFather
# 1. Create a new bot with /newbot command
# 2. Copy the bot token
# 3. Set domain for Login Widget: /setdomain
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# File Upload Configuration
# Directory for storing uploaded files
UPLOAD_DIR=uploads

# Sentry Error Tracking & Monitoring
# Get DSN from: https://sentry.io/settings/projects/your-project/keys/
# Leave empty to disable Sentry
SENTRY_DSN=
# Environment name (development, staging, production)
ENVIRONMENT=development
# Enable performance tracing (true/false)
SENTRY_ENABLE_TRACING=true
# Sample rate for performance monitoring (0.0 to 1.0)
# In production, use lower values like 0.1 (10%) to reduce overhead
SENTRY_TRACES_SAMPLE_RATE=1.0
# Release version for tracking deploys (optional)
# SENTRY_RELEASE=backend@1.0.0
# Enable debug mode for Sentry SDK (true/false)
SENTRY_DEBUG=false

# Logging Configuration
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO
# Log format: json (structured) or text (human-readable)
LOG_FORMAT=json
# Log directory (only used if LOG_FILE_ENABLED=true)
LOG_DIR=logs
# Enable file logging (usually false in Docker/Kubernetes, logs go to stdout)
LOG_FILE_ENABLED=false
# Log rotation settings
LOG_ROTATION_SIZE_MB=10
LOG_ROTATION_BACKUP_COUNT=5

# Rate Limiting Configuration
# Enable/disable rate limiting
RATE_LIMIT_ENABLED=true
# Requests per minute for authenticated users (global default)
RATE_LIMIT_AUTH_PER_MINUTE=100
# Requests per minute for anonymous users (global default)
RATE_LIMIT_ANON_PER_MINUTE=20
# Comma-separated list of whitelisted IPs (bypass rate limiting)
RATE_LIMIT_WHITELIST_IPS=127.0.0.1,::1
# Comma-separated list of paths to exclude from rate limiting
RATE_LIMIT_EXCLUDE_PATHS=/health,/metrics
# Per-endpoint rate limits (JSON format, regex patterns)
# Example: {"^/graphql$": {"auth": 50, "anon": 10}, "^/api/search": {"auth": 30, "anon": 5}}
# Leave empty to use global limits for all endpoints
RATE_LIMIT_ENDPOINT_LIMITS={}

# HTTP Caching Configuration
# Enable/disable HTTP caching (Cache-Control, ETag, 304 responses)
CACHE_CONTROL_ENABLED=true
# Max age for GraphQL queries in seconds (default: 60 seconds)
CACHE_CONTROL_QUERY_MAX_AGE=60
# Max age for other endpoints in seconds (default: 30 seconds)
CACHE_CONTROL_DEFAULT_MAX_AGE=30
# Comma-separated list of paths to exclude from caching
CACHE_CONTROL_EXCLUDE_PATHS=/metrics

# Service-Level Caching Configuration (Redis)
# Enable/disable service-level caching for expensive queries
SERVICE_CACHE_ENABLED=true
# Default TTL for cached items in seconds (default: 300 = 5 minutes)
SERVICE_CACHE_DEFAULT_TTL=300
# Maximum number of cached keys to prevent memory bloat (default: 10000)
SERVICE_CACHE_MAX_KEYS=10000

# Celery Background Tasks Configuration
# Celery uses the same Redis connection as the main application
# Worker concurrency (number of worker processes, default: number of CPUs)
CELERY_WORKER_CONCURRENCY=4
# Maximum tasks per worker before restart (prevents memory leaks)
CELERY_WORKER_MAX_TASKS_PER_CHILD=1000
# File cleanup max age in days (for periodic cleanup task)
FILE_CLEANUP_MAX_AGE_DAYS=90
# Temporary directory for file processing
TEMP_DIR=temp

# ==============================================================================
# Security Notes for Production
# ==============================================================================
#
# CRITICAL: Generate strong, unique secrets for production!
#
# Generate JWT secret (64 characters):
#   openssl rand -hex 32
#
# Generate database/Redis passwords (32 characters):
#   openssl rand -base64 32
#
# NEVER commit actual secrets to version control!
# Use GitHub Secrets or environment variables for production.
#
# See PRODUCTION_DEPLOYMENT.md for complete deployment guide.
# ==============================================================================