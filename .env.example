# Environment Configuration Example
# Copy this file to .env and update with your values

# JWT Configuration
JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production-MUST-BE-CHANGED
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Database Configuration
# For local development
DB_HOST=localhost
DB_PORT=5432
DB_NAME=templates
DB_USER=template_user
DB_PASSWORD=template_password

# Database URL (constructed from above values)
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

# Application Configuration
APP_HOST=0.0.0.0
APP_PORT=8000
DEBUG=False

# Database Initialization
# Set to 'true' to automatically seed database with test data on startup
# Set to 'false' in production to prevent data seeding
SEED_DATABASE=true

# Redis Configuration
# For local development
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# For production, set password
# REDIS_PASSWORD=your_redis_password

# CORS Configuration
# Comma-separated list of allowed origins
ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173

# Email Configuration
# For local development with MailPit (docker-compose.dev.yml)
SMTP_HOST=mailpit
SMTP_PORT=1025
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_USE_TLS=False
FROM_EMAIL=noreply@multipult.dev

# For production, use real SMTP server (e.g., SendGrid, AWS SES)
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USERNAME=apikey
# SMTP_PASSWORD=your_sendgrid_api_key
# SMTP_USE_TLS=True

# Frontend URL for email links (verification, password reset)
FRONTEND_URL=http://localhost:5173

# OAuth Configuration
# Google OAuth
# Get credentials from: https://console.cloud.google.com/apis/credentials
# 1. Create OAuth 2.0 Client ID
# 2. Add authorized redirect URIs (e.g., http://localhost:5173/auth/google/callback)
# 3. Copy Client ID and Client Secret
GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# Telegram OAuth
# Get bot token from: https://t.me/BotFather
# 1. Create a new bot with /newbot command
# 2. Copy the bot token
# 3. Set domain for Login Widget: /setdomain
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# File Upload Configuration
# Directory for storing uploaded files
UPLOAD_DIR=uploads